{"code":"export function mergeOptions(opts) {\r\n    // 错误上报\r\n    let res_errorTypes = [];\r\n    if (opts && (opts.errorTypes)) {\r\n        res_errorTypes = opts.errorTypes;\r\n    }\r\n    else {\r\n        res_errorTypes = [\"jserror\", \"promise\"];\r\n    }\r\n    // 性能监控\r\n    let res_perfTypes = [];\r\n    if (opts && (opts.perfTypes)) {\r\n        res_perfTypes = opts.perfTypes;\r\n    }\r\n    else {\r\n        res_perfTypes = [\"fp\", \"fcp\", \"fmp\"];\r\n    }\r\n    // 埋点监控\r\n    let res_trackTypes = [];\r\n    if (opts && (opts.trackTypes)) {\r\n        res_trackTypes = opts.trackTypes;\r\n    }\r\n    else {\r\n        res_trackTypes = [\"ajax\", \"fetch\", \"xpath\"];\r\n    }\r\n    return {\r\n        errorTypes: res_errorTypes,\r\n        perfTypes: res_perfTypes,\r\n        trackTypes: res_trackTypes\r\n    };\r\n}\r\nlet lastEvent;\r\n['click', 'pointerdown', 'touchstart', 'mousedown', 'keydown', 'mouseover'].forEach(event => {\r\n    document.addEventListener(event, (event) => {\r\n        lastEvent = event;\r\n    }, {\r\n        capture: true,\r\n        passive: true //passive 的意思是顺从的，表示它不会对事件的默认行为说 no\r\n    });\r\n});\r\nexport function getLastEvent() {\r\n    return lastEvent;\r\n}\r\n;\r\nconst getSelector = function (path) {\r\n    return path.reverse().filter(function (element) {\r\n        return element !== window && element !== document;\r\n    }).map(function (element) {\r\n        var selector;\r\n        if (element.id) {\r\n            selector = `#${element.id}`;\r\n        }\r\n        else if (element.className && typeof element.className === 'string') {\r\n            selector = '.' + element.className.split(' ').filter(function (item) { return !!item; }).join('.');\r\n        }\r\n        else {\r\n            selector = element.nodeName;\r\n        }\r\n        return selector;\r\n    }).join(' ');\r\n};\r\nexport function getSelectors(pathsOrTarget) {\r\n    if (Array.isArray(pathsOrTarget)) {\r\n        return getSelector(pathsOrTarget);\r\n    }\r\n    else {\r\n        // 对脚本加载错误的时候的判断\r\n        var paths = [];\r\n        var element = pathsOrTarget;\r\n        while (element) {\r\n            paths.push(element);\r\n            element = element.parentNode;\r\n        }\r\n        return getSelector(paths);\r\n    }\r\n}\r\nexport function getLines(stack) {\r\n    if (!stack) {\r\n        return '';\r\n    }\r\n    return stack.split('\\n').slice(1).map(item => item.replace(/^\\s+at\\s+/g, '')).join('^');\r\n}\r\n","references":[]}
