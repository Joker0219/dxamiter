{"code":"import { AsyncTaskQueue } from \"./async-task-queue\";\r\n// import { stringify } from 'query-string';\r\nimport { v4 as uuid } from 'uuid';\r\n// interface --> \r\n// seqId: number\r\n// id: string\r\n// timestamp: number\r\n// \r\n/** */\r\nexport class BaseTrack extends AsyncTaskQueue {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.seq = 0;\r\n    }\r\n    // 实现这个 抽象函数。\r\n    consumeTaskQueue(data) {\r\n        let img;\r\n        console.log('sending... img...', data);\r\n        img = new Image(0, 0);\r\n        img.src = 'http://localhost:3001/1.gif?' + JSON.stringify(data);\r\n        img.onload = img.onerror = function () {\r\n            img = null;\r\n        };\r\n        // return axios.post('http://lubai.com', {data})\r\n    }\r\n    // 为什么？ 主要就是还是要分层。\r\n    track(data) {\r\n        if (data) {\r\n            console.log(\"Tracking...\", data);\r\n            this.addTask(Object.assign({ id: uuid(), seqId: this.seq++, timestamp: Date.now() }, data));\r\n        }\r\n    }\r\n}\r\nexport const baseTrack = new BaseTrack();\r\n","references":["/Users/gavin/Documents/front-end-for-speed/dxamiter/src/sdk/async-task-queue.ts","/Users/gavin/Documents/front-end-for-speed/dxamiter/node_modules/@types/uuid/index.d.ts"]}
