{"code":"import _ from 'lodash-es';\r\n// interface RequiredData {\r\n//     timestamp: number;\r\n// }\r\n// 存储层的数据\r\nclass TaskQueueStorableHelper {\r\n    constructor() {\r\n        // protected store: any = null;\r\n        // private STORAGE_KEY = \"lubai_store\";\r\n        this.store = null;\r\n        this.STORAGE_KEY = \"lubai_store\";\r\n        const localStorageValue = localStorage.getItem(this.STORAGE_KEY);\r\n        if (localStorageValue) {\r\n            this.store = JSON.parse(localStorageValue);\r\n        }\r\n    }\r\n    static getInstance() {\r\n        if (!this.instance) {\r\n            this.instance = new TaskQueueStorableHelper();\r\n        }\r\n        return this.instance;\r\n    }\r\n    get queueData() {\r\n        var _a;\r\n        return ((_a = this.store) === null || _a === void 0 ? void 0 : _a.queueData) || [];\r\n    }\r\n    set queueData(queueData) {\r\n        this.store = Object.assign(Object.assign({}, this.store), { queueData: queueData.sort((a, b) => Number(a.timestamp) - Number(b.timestamp)) });\r\n        localStorage.setItem(this.STORAGE_KEY, JSON.stringify(this.store));\r\n    }\r\n}\r\nTaskQueueStorableHelper.instance = null;\r\nexport class AsyncTaskQueue {\r\n    constructor() {\r\n        this.debounceRun = _.debounce(this.run.bind(this), 1000);\r\n    }\r\n    get storableService() {\r\n        return TaskQueueStorableHelper.getInstance();\r\n    }\r\n    // 提供给异步队列使用的。\r\n    get queueData() {\r\n        return this.storableService.queueData;\r\n    }\r\n    set queueData(value) {\r\n        this.storableService.queueData = value;\r\n        if (value.length) {\r\n            // todo run\r\n            this.debounceRun();\r\n        }\r\n    }\r\n    // protected adstratc consumeTaskQueue();\r\n    consumeTaskQueue(data) {\r\n        console.error(\"You should realize this function all by Urself. \");\r\n    }\r\n    // private\r\n    run() {\r\n        // 实际要上报的内容\r\n        // 如果要严谨一些，通过每一个 task ID 来重新给队列赋值。\r\n        const currentDataList = this.queueData;\r\n        if (currentDataList.length) {\r\n            // 当前这批数据上报完成后，需要从 queueData 中剔除。\r\n            this.consumeTaskQueue(currentDataList); //.catch(_ as any => _);// 这里可以重试。\r\n            this.queueData = [];\r\n        }\r\n    }\r\n    // 如何去往数组里推内容\r\n    addTask(data) {\r\n        this.queueData = this.queueData.concat(data);\r\n    }\r\n}\r\n/** 开发人员调用 addTask -> set QueueData -> debounceRun -> 1000ms 后 run -> 清空数组 */ \r\n","references":["/Users/gavin/Documents/front-end-for-speed/dxamiter/node_modules/@types/lodash-es/index.d.ts"]}
