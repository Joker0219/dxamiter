{"code":"import { mergeOptions } from \"./utils/index\";\r\nimport { handleErrors } from './handlers/errors/index';\r\nimport { handlePrefs } from \"./handlers/performances/index\";\r\nimport { handleTrackers } from \"./handlers/trackers/index\";\r\nimport { baseTrack } from './sdk/track.js';\r\nconsole.log(\"Welcome to dxamiter!, U can visit http://www.baidu.com to learn more about this \");\r\nconst handlers = {\r\n    errorTypes: handleErrors(),\r\n    perfTypes: handlePrefs(),\r\n    trackTypes: handleTrackers(),\r\n};\r\nexport default (opts, handler) => {\r\n    // 对 opts 的类型进行判断；\r\n    opts = mergeOptions(opts);\r\n    // 如果没有显式的监控回调函数，使用自己的。\r\n    if (!handler) {\r\n        handler = inlineHandler;\r\n    }\r\n    // 函数挂载\r\n    // 不适合treeShaking ，暂时不考虑的可以。\r\n    Object.entries(opts).forEach(([key, value]) => {\r\n        value.forEach((item) => {\r\n            handlers[key][item](handler);\r\n        });\r\n    });\r\n    // if(opts.errorTypes) {\r\n    //     opts.errorTypes.forEach(key => handleErrors()[key]())\r\n    // }\r\n    // if(opts.perfTypes) {\r\n    //     opts.perfTypes.forEach(key => handlePrefs()[key]())\r\n    // }\r\n    // if(opts.trackTypes) {\r\n    //     opts.trackTypes.forEach(key => handleTrackers()[key]())\r\n    // }\r\n};\r\nfunction inlineHandler(obj) {\r\n    baseTrack.track(obj);\r\n}\r\n// export function monitor() :void {\r\n// }\r\n","references":["/Users/gavin/Documents/front-end-for-speed/dxamiter/src/utils/index.ts","/Users/gavin/Documents/front-end-for-speed/dxamiter/src/handlers/errors/index.ts","/Users/gavin/Documents/front-end-for-speed/dxamiter/src/handlers/performances/index.ts","/Users/gavin/Documents/front-end-for-speed/dxamiter/src/handlers/trackers/index.ts","/Users/gavin/Documents/front-end-for-speed/dxamiter/src/sdk/track.ts"]}
